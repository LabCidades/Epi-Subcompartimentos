
@article{andoHowFastLinear2020,
  title = {How Fast Is the Linear Chain Trick? {{A}} Rigorous Analysis in the Context of Behavioral Epidemiology},
  shorttitle = {How Fast Is the Linear Chain Trick?},
  author = {And{\`o}, Alessia and Breda, Dimitri and Gava, Giulia and And{\`o}, Alessia and Breda, Dimitri and Gava, Giulia},
  year = {2020},
  journal = {Mathematical Biosciences and Engineering},
  volume = {17},
  number = {5},
  pages = {5059--5084},
  issn = {1551-0018},
  doi = {10.3934/mbe.2020273},
  abstract = {A prototype SIR model with vaccination at birth is analyzed in terms of the stability of its endemic equilibrium. The information available on the disease influences the parentso decision on whether vaccinate or not. This information is modeled with a delay according to the Erlang distribution. The latter includes the degenerate case of fading memory as well as the limiting case of concentrated memory. The linear chain trick is the essential tool used to investigate the general case. Besides its novel analysis and that of the concentrated case, it is showed that through the linear chain trick a distributed delay approaches a discrete delay at a linear rate. A rigorous proof is given in terms of the eigenvalues of the associated linearized problems and extension to general models is also provided. The work is completed with several computations and relevant experimental results.},
  copyright = {2020 The Author(s)},
  language = {en},
  file = {/Users/storopoli/Zotero/storage/B4BQJU5G/Andò et al. - 2020 - How fast is the linear chain trick A rigorous ana.pdf;/Users/storopoli/Zotero/storage/PYGEG47T/mbe.html}
}

@article{hurtadoGeneralizationsLinearChain2019,
  title = {Generalizations of the '{{Linear Chain Trick}}': Incorporating More Flexible Dwell Time Distributions into Mean Field {{ODE}} Models},
  shorttitle = {Generalizations of the '{{Linear Chain Trick}}'},
  author = {Hurtado, Paul J. and Kirosingh, Adam S.},
  year = {2019},
  month = oct,
  journal = {Journal of Mathematical Biology},
  volume = {79},
  number = {5},
  pages = {1831--1883},
  issn = {1432-1416},
  doi = {10.1007/s00285-019-01412-w},
  abstract = {In this paper we generalize the Linear Chain Trick (LCT; aka the Gamma Chain Trick) to help provide modelers more flexibility to incorporate appropriate dwell time assumptions into mean field ODEs, and help clarify connections between individual-level stochastic model assumptions and the structure of corresponding mean field ODEs. The LCT is a technique used to construct mean field ODE models from continuous-time stochastic state transition models where the time an individual spends in a given state (i.e., the dwell time) is Erlang distributed (i.e., gamma distributed with integer shape parameter). Despite the LCT's widespread use, we lack general theory to facilitate the easy application of this technique, especially for complex models. Modelers must therefore choose between constructing ODE models using heuristics with oversimplified dwell time assumptions, using time consuming derivations from first principles, or to instead use non-ODE models (like integro-differential or delay differential equations) which can be cumbersome to derive and analyze. Here, we provide analytical results that enable modelers to more efficiently construct ODE models using the LCT or related extensions. Specifically, we provide (1) novel LCT extensions for various scenarios found in applications, including conditional dwell time distributions; (2) formulations of these LCT extensions that bypass the need to derive ODEs from integral equations; and (3) a novel Generalized Linear Chain Trick (GLCT) framework that extends the LCT to a much broader set of possible dwell time distribution assumptions, including the flexible phase-type distributions which can approximate distributions on [Formula: see text] and can be fit to data.},
  language = {eng},
  pmcid = {PMC6800873},
  pmid = {31410551},
  keywords = {Computational Biology,Distributed delay,Gamma chain trick,Humans,Linear Chain Trick,Linear Models,Mathematical Concepts,Mean field model,Models; Biological,Phase-type distributions,Poisson Distribution,Stochastic Processes,Systems Biology,Time Factors,Time lag},
  file = {/Users/storopoli/Zotero/storage/439CG2FI/Hurtado and Kirosingh - 2019 - Generalizations of the 'Linear Chain Trick' incor.pdf}
}

@article{hurtadoProcedureDerivingNew2020,
  title = {A Procedure for Deriving New {{ODE}} Models: {{Using}} the Generalized Linear Chain Trick to Incorporate Phase-Type Distributed Delay and Dwell Time Assumptions},
  shorttitle = {A Procedure for Deriving New {{ODE}} Models},
  author = {Hurtado, Paul and Richards, Cameron},
  year = {2020},
  month = dec,
  journal = {Mathematics in Applied Sciences and Engineering},
  volume = {1},
  number = {4},
  pages = {410--422},
  issn = {2563-1926},
  doi = {10.5206/mase/10857},
  copyright = {Copyright (c) 2020 Paul Hurtado, Cameron Richards},
  language = {en},
  keywords = {Coxian distribution,gamma chain trick,Hypoexponential distribution,linear chain trick,phase-type distribution},
  file = {/Users/storopoli/Zotero/storage/P734RVY6/Hurtado and Richards - 2020 - A procedure for deriving new ODE models Using the.pdf;/Users/storopoli/Zotero/storage/M3YDFAN3/10857.html}
}

@article{grinsztajnBayesianWorkflowDisease2021,
  title = {Bayesian Workflow for Disease Transmission Modeling in {{Stan}}},
  author = {Grinsztajn, L{\'e}o and Semenova, Elizaveta and Margossian, Charles C. and Riou, Julien},
  year = {2021},
  month = feb,
  journal = {arXiv:2006.02985 [q-bio, stat]},
  eprint = {2006.02985},
  eprinttype = {arxiv},
  primaryclass = {q-bio, stat},
  abstract = {This tutorial shows how to build, fit, and criticize disease transmission models in Stan, and should be useful to researchers interested in modeling the SARS-CoV-2 pandemic and other infectious diseases in a Bayesian framework. Bayesian modeling provides a principled way to quantify uncertainty and incorporate both data and prior knowledge into the model estimates. Stan is an expressive probabilistic programming language that abstracts the inference and allows users to focus on the modeling. As a result, Stan code is readable and easily extensible, which makes the modeler's work more transparent. Furthermore, Stan's main inference engine, Hamiltonian Monte Carlo sampling, is amiable to diagnostics, which means the user can verify whether the obtained inference is reliable. In this tutorial, we demonstrate how to formulate, fit, and diagnose a compartmental transmission model in Stan, first with a simple Susceptible-Infected-Recovered (SIR) model, then with a more elaborate transmission model used during the SARS-CoV-2 pandemic. We also cover advanced topics which can further help practitioners fit sophisticated models; notably, how to use simulations to probe the model and priors, and computational techniques to scale-up models based on ordinary differential equations.},
  archiveprefix = {arXiv},
  keywords = {⛔ No DOI found,Quantitative Biology - Quantitative Methods,Statistics - Applications,Statistics - Computation},
  file = {/Users/storopoli/Zotero/storage/T3AQ83TS/Grinsztajn et al. - 2021 - Bayesian workflow for disease transmission modelin.pdf;/Users/storopoli/Zotero/storage/V6WBUUPN/2006.html}
}

@article{carpenterStanProbabilisticProgramming2017,
  title = {Stan : {{A Probabilistic Programming Language}}},
  author = {Carpenter, Bob and Gelman, Andrew and Hoffman, Matthew D. and Lee, Daniel and Goodrich, Ben and Betancourt, Michael and Brubaker, Marcus and Guo, Jiqiang and Li, Peter and Riddell, Allen},
  year = {2017},
  journal = {Journal of Statistical Software},
  volume = {76},
  number = {1},
  publisher = {{American Statistical Association}},
  issn = {1548-7660},
  doi = {10.18637/jss.v076.i01},
  abstract = {Stan is a probabilistic programming language for specifying statistical models. A Stan program imperatively defines a log probability function over parameters conditioned on specified data and constants. As of version 2.14.0, Stan provides full Bayesian inference for continuous-variable models through Markov chain Monte Carlo methods such as the No-U-Turn sampler, an adaptive form of Hamiltonian Monte Carlo sampling. Penalized maximum likelihood estimates are calculated using optimization methods such as the limited memory Broyden-Fletcher-Goldfarb-Shanno algorithm. Stan is also a platform for computing log densities and their gradients and Hessians, which can be used in alternative algorithms such as variational Bayes, expectation propagation, and marginal inference using approximate integration. To this end, Stan is set up so that the densities, gradients, and Hessians, along with intermediate quantities of the algorithm such as acceptance probabilities, are easily accessible. Stan can be called from the command line using the cmdstan package, through R using the rstan package, and through Python using the pystan package. All three interfaces support sampling and optimization-based inference with diagnostics and posterior analysis. rstan and pystan also provide access to log probabilities, gradients, Hessians, parameter transforms, and specialized plotting.},
  keywords = {Algorithmic differentiation,Bayesian inference,Probabilistic program,Stan},
  annotation = {2846 citations (Semantic Scholar/DOI) [2021-02-13]},
  file = {/Users/storopoli/Zotero/storage/7SIEZ4SU/Carpenter et al. - 2017 - Stan A Probabilistic Programming Language.pdf}
}

@article{gelmanBayesianWorkflow2020,
  title = {Bayesian {{Workflow}}},
  author = {Gelman, Andrew and Vehtari, Aki and Simpson, Daniel and Margossian, Charles C. and Carpenter, Bob and Yao, Yuling and Kennedy, Lauren and Gabry, Jonah and B{\"u}rkner, Paul-Christian and Modr{\'a}k, Martin},
  year = {2020},
  month = nov,
  journal = {arXiv:2011.01808 [stat]},
  eprint = {2011.01808},
  eprinttype = {arxiv},
  primaryclass = {stat},
  abstract = {The Bayesian approach to data analysis provides a powerful way to handle uncertainty in all observations, model parameters, and model structure using probability theory. Probabilistic programming languages make it easier to specify and fit Bayesian models, but this still leaves us with many options regarding constructing, evaluating, and using these models, along with many remaining challenges in computation. Using Bayesian inference to solve real-world problems requires not only statistical skills, subject matter knowledge, and programming, but also awareness of the decisions made in the process of data analysis. All of these aspects can be understood as part of a tangled workflow of applied Bayesian statistics. Beyond inference, the workflow also includes iterative model building, model checking, validation and troubleshooting of computational problems, model understanding, and model comparison. We review all these aspects of workflow in the context of several examples, keeping in mind that in practice we will be fitting many models for any given problem, even if only a subset of them will ultimately be relevant for our conclusions.},
  archiveprefix = {arXiv},
  keywords = {⛔ No DOI found,Statistics - Methodology},
  annotation = {5 citations (Semantic Scholar/arXiv) [2021-02-13]},
  file = {/Users/storopoli/Zotero/storage/KBQP2U94/Gelman et al. - 2020 - Bayesian Workflow.pdf;/Users/storopoli/Zotero/storage/79ZD8TLD/2011.html}
}

@article{storopoliSimulationDrivenCOVID19Epidemiological2021,
  title = {Simulation-{{Driven COVID}}-19 {{Epidemiological Modeling}} with {{Social Media}}},
  author = {Storopoli, Jose and dos Santos, Andre Luis Marques Ferreira and Pellini, Alessandra Cristina Guedes and Baldwin, Breck},
  year = {2021},
  month = jun,
  journal = {arXiv:2106.11686 [stat]},
  eprint = {2106.11686},
  eprinttype = {arxiv},
  primaryclass = {stat},
  abstract = {Modern Bayesian approaches and workflows emphasize in how simulation is important in the context of model developing. Simulation can help researchers understand how the model behaves in a controlled setting and can be used to stress the model in different ways before it is exposed to any real data. This improved understanding could be beneficial in epidemiological models, specially when dealing with COVID-19. Unfortunately, few researchers perform any simulations. We present a simulation algorithm that implements a simple agent-based model for disease transmission that works with a standard compartment epidemiological model for COVID-19. Our algorithm can be applied in different parameterizations to reflect several plausible epidemic scenarios. Additionally, we also model how social media information in the form of daily symptom mentions can be incorporate into COVID-19 epidemiological models. We test our social media COVID-19 model with two experiments. The first using simulated data from our agent-based simulation algorithm and the second with real data using a machine learning tweet classifier to identify tweets that mention symptoms from noise. Our results shows how a COVID-19 model can be (1) used to incorporate social media data and (2) assessed and evaluated with simulated and real data.},
  archiveprefix = {arXiv},
  copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
  keywords = {⛔ No DOI found,Statistics - Applications},
  file = {/Users/storopoli/Zotero/storage/CMLWIV4N/Storopoli et al. - 2021 - Simulation-Driven COVID-19 Epidemiological Modelin.pdf;/Users/storopoli/Zotero/storage/HJX9SQ5L/2106.html}
}

